import { b as boot, c as createI18n } from "./index.f0dfeb9e.js";
var codeValidation$1 = {
  twoFAValidation: "2FA validation \u{1F512}",
  theCode: "The code for",
  validation: "2FA validation",
  wasSend: "was send",
  sendTo: "The code will be send to",
  typeDigits: "Write the 6 security digits",
  sendCode: "Send code",
  resendCode: "Resend in",
  enter: "Enter",
  toObtain: "to get your security code"
};
var buttons$1 = {
  login: "Log in",
  register: "Sign up",
  createAccount: "Create account",
  changeLanguageTo: "Change language to ",
  send: "Send code",
  continue: "Continue"
};
var fields$1 = {
  email: "Email",
  phoneNumber: "Phone number",
  password: "Password",
  confirmPassword: "Confirm your password",
  search: "Search"
};
var forgotPassword$1 = {
  forgotPassword: "Forgot your password? \u{1F512}",
  introduce: "Introduce your",
  willReceive: "and you will receive the",
  instructions: "instructions for your password recovery"
};
var langs$1 = {
  spanish: "Spanish",
  english: "English"
};
var login$1 = {
  welcome: "Welcome to {0}! \u{1F44B}",
  caption: "Join to the best platform to save and send your money",
  newInPlatform: "Are you new in the platform?",
  createAnAccount: "Create an account",
  forgotYourPassword: "Forgot your password?",
  alreadyHaveAnAccount: "Already have an account?",
  login: "Log in",
  termsAndPolicy: "I have read and accept the",
  and: "and the",
  of: "of",
  terms: "Terms of services",
  politics: "Privacy policy"
};
var passwordReset$1 = {
  passwordReset: "Password reset \u{1F4AC}",
  introduce: "Please introduce",
  yourPassword: "your new password"
};
var validations$1 = {
  email: "The email entered is not valid.",
  password: "The password must contain at least 8 characters.",
  required: "This field is required.",
  validValue: "The entered value is not valid.",
  numbers: "Enter only numbers in this field.",
  invalidDate: "The date entered is not valid.",
  validateAll: "You must complete all required fields!",
  passwordsDontMatch: "Passwords do not match."
};
var verifyEmail$1 = {
  verifyEmail: "Verify your email \u2709\uFE0F",
  theCode: "The code of",
  activation: "activation/recovery",
  wasSended: "of your account was send",
  toYourAccount: "to your email address"
};
var accountCreated$1 = {
  accountCreated: "Account created",
  validateYourEntity: "Validate your identity",
  caption: "Before continuing, make sure you have one of the following documents at hand:",
  ci: "Identification card",
  passport: "Passport",
  carnet: "Immigration card",
  cpp: " CPP",
  ptp: "PTP",
  license: "Driver's license",
  pressTheButton: "Push the button when you're ready"
};
var balance$1 = {
  totalBalance: "Total balance",
  cards: "Cards",
  wallets: "Wallets"
};
var enUS = {
  login: {
    ...login$1
  },
  fields: {
    ...fields$1
  },
  validations: {
    ...validations$1
  },
  buttons: {
    ...buttons$1
  },
  langs: {
    ...langs$1
  },
  forgotPassword: {
    ...forgotPassword$1
  },
  verifyEmail: {
    ...verifyEmail$1
  },
  passwordReset: {
    ...passwordReset$1
  },
  codeValidation: {
    ...codeValidation$1
  },
  accountCreated: {
    ...accountCreated$1
  },
  balance: {
    ...balance$1
  }
};
var verifyEmail = {
  verifyEmail: "Verifica tu correo \u2709\uFE0F",
  theCode: "El c\xF3digo de",
  activation: "activaci\xF3n/recuperaci\xF3n",
  wasSended: "de su cuenta fue enviado",
  toYourAccount: "a su direcci\xF3n de correo electr\xF3nico"
};
var buttons = {
  login: "Inicia sesi\xF3n",
  register: "Registrate",
  createAccount: "Crear cuenta",
  changeLanguageTo: "Cambiar idioma a ",
  send: "Enviar c\xF3digo",
  continue: "Continuar"
};
var fields = {
  email: "Correo",
  phoneNumber: "N\xFAmero de t\xE9lefono",
  password: "Contrase\xF1a",
  confirmPassword: "Confirme su contrase\xF1a",
  search: "Buscar"
};
var forgotPassword = {
  forgotPassword: "\xBFOlvid\xF3 la clave? \u{1F512}",
  introduce: "Introduzca su",
  willReceive: "y recibir\xE1 las",
  instructions: "intrucciones para recuperar su clave"
};
var langs = {
  spanish: "Espa\xF1ol",
  english: "Ingl\xE9s"
};
var login = {
  welcome: "\xA1Bienvenido a {0}! \u{1F44B}",
  caption: "\xDAnete a la mejor plataforma para guardar y enviar tu dinero",
  newInPlatform: "\xBFEres nuevo en la plataforma?",
  createAnAccount: "Crea una cuenta",
  forgotYourPassword: "\xBFOlvid\xF3 su contrase\xF1a?",
  alreadyHaveAnAccount: "\xBFYa tienes cuenta?",
  login: "Inicia sesi\xF3n",
  termsAndPolicy: "He le\xEDdo y acepto los",
  terms: "T\xE9rminos de servicio",
  and: "y la",
  of: "de",
  politics: "Pol\xEDtica de privacidad"
};
var validations = {
  email: "El correo ingresado no es v\xE1lido.",
  password: "La contrase\xF1a debe contener m\xEDnimo 8 car\xE1cteres.",
  required: "Este campo es requerido.",
  validValue: "El valor ingresado no es v\xE1lido.",
  numbers: "Ingrese s\xF3lo n\xFAmeros en este campo.",
  invalidDate: "La fecha ingresada no es v\xE1lida.",
  validateAll: "\xA1Debe completar todos los campos solicitados!",
  passwordsDontMatch: "Las contrase\xF1as no coinciden."
};
var passwordReset = {
  passwordReset: "Restauraci\xF3n de clave \u{1F4AC}",
  introduce: "Por favor ingrese",
  yourPassword: "su nueva clave"
};
var codeValidation = {
  twoFAValidation: "Validaci\xF3n 2FA \u{1F512}",
  theCode: "El c\xF3digo",
  validation: "validaci\xF3n 2FA",
  wasSend: "fue enviado",
  sendTo: "Se enviar\xE1 a",
  typeDigits: "Escribe los 6 d\xEDgitos de seguridad",
  sendCode: "Enviar el c\xF3digo",
  resendCode: "Reenviar en",
  enter: "Ingresa a",
  toObtain: "para obtener el c\xF3digo de seguridad"
};
var accountCreated = {
  accountCreated: "Cuenta creada",
  validateYourEntity: "V\xE1lida tu identidad",
  caption: "Antes de continuar, asegurate de tener a mano alguno de los siguientes documentos:",
  ci: "C\xE9dula",
  passport: "Pasaporte",
  carnet: "Carnet de extrajeria",
  cpp: " CPP",
  ptp: "PTP",
  license: "Licencia de conducir",
  pressTheButton: "Presiona el bot\xF3n cuando est\xE9s listo"
};
var balance = {
  totalBalance: "Balance total",
  cards: "Tarjetas",
  wallets: "Billeteras"
};
var esES = {
  login: {
    ...login
  },
  fields: {
    ...fields
  },
  validations: {
    ...validations
  },
  buttons: {
    ...buttons
  },
  langs: {
    ...langs
  },
  forgotPassword: {
    ...forgotPassword
  },
  verifyEmail: {
    ...verifyEmail
  },
  passwordReset: {
    ...passwordReset
  },
  codeValidation: {
    ...codeValidation
  },
  accountCreated: {
    ...accountCreated
  },
  balance: {
    ...balance
  }
};
var messages = {
  "en-US": enUS,
  "es-ES": esES
};
var i18n = boot(({ app }) => {
  const i18n2 = createI18n({
    locale: "es-ES",
    globalInjection: true,
    messages
  });
  app.use(i18n2);
});
export { i18n as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
